{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","Todo/Addtodo.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","padding","border","borderRadius","marginBottom","input","marginRight","TodoItem","itemObj","index","onChange","removeTodo","useContext","classes","completed","push","style","className","join","type","checked","id","title","onClick","bind","ul","listStyle","margin","TodoList","props","todos","map","key","onToggle","AddTodo","onCreate","defaultValue","useState","value","setValue","event","target","clear","useInputValue","onSubmit","preventDefault","trim","App","setTodos","useEffect","fetch","then","response","json","Provider","filter","todo","Addtodo","concat","Date","now","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8KAGeA,EADCC,IAAMC,gBCIhBC,EAAU,CACZC,GAAI,CACAC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,QAAS,aACTC,OAAQ,iBACRC,aAAc,MACdC,aAAc,SAElBC,MAAO,CACHC,YAAa,SAwCNC,MAnCf,YAAiD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxBC,EAAeC,qBAAWnB,GAA1BkB,WACFE,EAAS,GAKf,OADAL,EAAQM,UAAUD,EAAQE,KAAK,QAAQF,EAAQE,KAAK,IAEpD,wBAAIC,MAASpB,EAAOC,IAChB,0BAAMoB,UAAWJ,EAAQK,KAAK,MAC9B,2BAAOC,KAAK,WACZC,QAASZ,EAAQM,UACjBE,MAAQpB,EAAOS,MACfK,SAAW,kBAAMA,EAASF,EAAQa,OAElC,gCAASZ,EAAQ,GANjB,OAQCD,EAAQc,OAET,4BAAQL,UAAU,KAAKM,QAASZ,EAAWa,KAAK,KAAMhB,EAAQa,KAA9D,UCpCFL,EAAQ,CACVS,GAAI,CACAC,UAAW,OACXC,OAAQ,EACR1B,QAAS,IAwBF2B,MAnBf,SAAkBC,GACd,OACI,wBAAIb,MAAOA,EAAMS,IACZI,EAAMC,MAAMC,KAAI,SAACvB,EAASa,GACvB,OAAO,kBAAC,EAAD,CAAUb,QAASA,EAASwB,IAAKxB,EAAQa,GAAIZ,MAAOY,EAAIX,SAAWmB,EAAMI,gBCqBjFC,MAxBf,YAAgC,IAAZC,EAAW,EAAXA,SAEX9B,EAdT,WAA2C,IAApB+B,EAAmB,uDAAJ,GAAI,EACZC,mBAASD,GADG,mBAC/BE,EAD+B,KACxBC,EADwB,KAEtC,MAAO,CACHf,KAAM,CACFc,MAAOA,EACP5B,SAAU,SAAA8B,GAAK,OAAID,EAASC,EAAMC,OAAOH,SAE7CI,MAAO,kBAAMH,EAAS,KACtBD,MAAO,kBAAMA,IAMJK,CAAc,IAU3B,OACI,0BAAM3B,MAAQ,CAACZ,aAAc,QAASwC,SAT1C,SAAwBJ,GACpBA,EAAMK,iBACHxC,EAAMiC,QAAQQ,SACbX,EAAS9B,EAAMiC,SACfjC,EAAMqC,WAMN,0BAAWrC,EAAMmB,MACjB,4BAAQL,KAAK,UAAb,cC0BG4B,MA/Cf,WAAgB,IAAD,EACarD,IAAM2C,SAAS,IAD5B,mBACNP,EADM,KACCkB,EADD,KAmCb,OAhCAC,qBAAW,WACTC,MAAM,uDACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAArB,GACJkB,EAASlB,QAEZ,IA2BD,kBAAC,EAAQwB,SAAT,CAAkBhB,MAAO,CAAC3B,WAd5B,SAAoBU,GACtB2B,EAASlB,EAAMyB,QAAO,SAAAC,GAAI,OAAIA,EAAKnC,KAAOA,SAcpC,yBAAKJ,UAAU,WACb,8CACA,kBAACwC,EAAD,CAAStB,SAbf,SAAiBb,GACf0B,EAASlB,EAAM4B,OAAO,CACpB,CACEpC,QACAD,GAAIsC,KAAKC,MACT9C,WAAW,SASVgB,EAAM+B,OAAS,kBAAC,EAAD,CAAU/B,MAAOA,EAAOG,SA5B9C,SAAoBZ,GAClB2B,EACElB,EAAMC,KAAI,SAAAyB,GAIR,OAHGA,EAAKnC,KAAOA,IACbmC,EAAK1C,WAAa0C,EAAK1C,WAElB0C,SAsB2D,2CCrCtDM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.07340310.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Context = React.createContext()\r\nexport default Context","import React, {useContext} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Context from '../context';\r\n//компонент пункта меню\r\n\r\n//задать инлайновые стили\r\nconst styles =  {\r\n    li: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        padding: '.5rem 1rem',\r\n        border: '1px solid #ccc', \r\n        borderRadius: '4px',\r\n        marginBottom: '.5rem'\r\n    },\r\n    input: {\r\n        marginRight: '1rem'\r\n    }\r\n\r\n}\r\n\r\nfunction TodoItem({ itemObj, index, onChange }) {\r\n    const { removeTodo } = useContext(Context)\r\n    const classes= []\r\n    // if (itemObj.completed) {\r\n    //     classes.push('done')\r\n    // }\r\n    itemObj.completed?classes.push('done'):classes.push('')\r\n    return (\r\n    <li style = {styles.li}>\r\n        <span className={classes.join(' ')}>\r\n        <input type=\"checkbox\"\r\n        checked={itemObj.completed}\r\n        style= {styles.input} \r\n        onChange= {() => onChange(itemObj.id)}\r\n        />\r\n        <strong>{index + 1}</strong>\r\n        &nbsp;\r\n        {itemObj.title}\r\n        </span>\r\n        <button className=\"rm\" onClick={removeTodo.bind(null, itemObj.id)}>&times;</button>\r\n    </li>\r\n    )\r\n\r\n}\r\n\r\n\r\n//описание входящих свойств в нужный компонент\r\n// функция примимает два параметра, их будем валидировать\r\n\r\nTodoItem.propTypes = {\r\n    itemObj: PropTypes.object.isRequired, //объект todo дб типом obj\r\n    index: PropTypes.number,\r\n    onChange: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoItem","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n//компонент списка\r\nimport TodoItem from './TodoItem';\r\n\r\nconst style = {\r\n    ul: {\r\n        listStyle: 'none',\r\n        margin: 0,\r\n        padding: 0\r\n    }\r\n\r\n}\r\n\r\nfunction TodoList(props) {\r\n    return (\r\n        <ul style={style.ul}>\r\n            {props.todos.map((itemObj, id) => { //props.todos????\r\n                return <TodoItem itemObj={itemObj} key={itemObj.id} index={id} onChange= {props.onToggle}></TodoItem>\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n\r\n\r\n//описание входящих свойств в нужный компонент\r\n//в компонент TodoList мы принимаем параметр todos\r\n\r\nTodoList.propTypes = {    //обратиться к функции TodoList  и определить у нее сво-во propTypes\r\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired, //здесь ключ-название свойства, определили тип массив из объектов.\r\n    onToggle: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoList\r\n\r\n\r\n\r\n\r\n//если передать в параметры index то index={index}\r\n//onToggle придумали сами название\r\n\r\n","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction useInputValue(defaultValue = '') { //новый хук, объект которвый вернет хук, будет содержать ключи для нашего инпута\r\n    const [value, setValue] = useState(defaultValue)\r\n    return {\r\n        bind: {\r\n            value: value,\r\n            onChange: event => setValue(event.target.value)\r\n        },\r\n        clear: () => setValue(''),\r\n        value: () => value //функция которая получает значение value\r\n    }\r\n}\r\n\r\nfunction AddTodo ( {onCreate}) {\r\n   // const [value, setValue] = useState('') //начальное состояние value пустая строка\r\n   const input = useInputValue('')\r\n\r\n    function submitHandler (event) {\r\n        event.preventDefault()\r\n        if(input.value().trim()) {\r\n            onCreate(input.value())\r\n            input.clear()\r\n           // setValue('')\r\n        }\r\n    }\r\n    return (\r\n        <form style={ {marginBottom: '1rem'}} onSubmit={submitHandler}>\r\n            <input {...input.bind} /> \r\n            <button type=\"submit\">Add todo</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddTodo.propTypes = {\r\n    onCreate: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddTodo","import React, {useEffect} from 'react';\nimport TodoList from './Todo/TodoList';\nimport Context from './context';\nimport Addtodo from './Todo/Addtodo'\n\n//https://jsonplaceholder.typicode.com/\n\n\n\nfunction App() {\n  const [todos, setTodos] = React.useState([])\n\n  useEffect( () => {\n    fetch('https://jsonplaceholder.typicode.com/todos?_limit=5')\n      .then(response => response.json())\n      .then(todos => { //мы получаем массив todos\n        setTodos(todos) //тут чтобы изменить state мы обращаемся к ф-ции и передаем массив\n      })\n  }, [])\n\n\n  function toggleTodo(id) {\n    setTodos(\n      todos.map(todo => {\n        if(todo.id === id) {\n          todo.completed = !todo.completed\n        }\n        return todo\n      })\n    )\n  }\n  function removeTodo(id) {\nsetTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  function addTodo(title)  {\n    setTodos(todos.concat([\n      {\n        title,\n        id: Date.now(),\n        completed: false\n      }\n    ]))\n  }\n  return (\n    <Context.Provider value={{removeTodo: removeTodo} }>\n      <div className=\"wrapper\">\n        <h1>React tutotial</h1>\n        <Addtodo onCreate={addTodo}/>\n        {todos.length ? <TodoList todos={todos} onToggle={toggleTodo}/> : <p>No todos!</p> }\n        \n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n\n\n//toggleTodo придумали сами\n//изменить state\n\n//  <Addtodo onCreate={addTodo}/> - addTodo придумали сами","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}